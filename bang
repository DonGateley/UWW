//JavaScript file defining and creating the UWW.
//For John Cocke of IBM: Thanks, John.  I bend my elbow to you once more.
//Acknowledgment to Bob Cain, creator of the UWW.
var sys = require("util"),
my_http = require("http"),
path = require("path"),
url = require("url"),
filesys = require("fs")
;

//Defining a function.  Function can be used after definition so they will be at the start.
//<script>
function uwwFuzz(parameter) {
//invoked on a UWW and fuzzes it about its coordinates to within a tolerance.  Can also be a member function.
	var variable = 0;
	variable = parameter;
	return variable;
}
//</script>

//Create the UWW event type
var uww = {
	function RealRealityX() {/*The member function that applies the hallowed transform.*/},
	function Event() {/*What do do*/},
	function From() {/*What do do*/},
	function Xform() {/*What do do*/},
	function Fuzz() {/*What do do*/},
	function Zero() {/*What do do*/}
	pX: 0,
	pY: 0,
	pZ: 0,
	qX: [0, 0],
	qY: [0, 0],
	qZ: [0, 0],
	qt: [0],
	d: []
};

//Create the UWW transform object
var uww.Xform = {
	d: uwwEvent
};

//The Universe and Everything
var uww new uww = uww.Zero;

//Real Reality hard wired eventually to some CMB measurement.
//Transformation to uwwCMB will be done locally.
var uww new uwwCMB = uww.Zero;

//Define the dynamic transform between uwwCMB
//and a sweetened, hallowed version of where
//the universe is pinned and centered.  Jitter
//or judder here is a very, very bad thing.
//  
//Real (as opposed to Virtual) Reality upon which we 
//agree to agree.  Starts null.

//Real Reality Transform
var uww.Xform new uww.RealRealityX;

//////////////Launched about 7:12 A.M. Fri JUN 10 2016.  Global access possible but not fruitful./////////////

//Need now to start connecting devices for external communication using Node.  Good point to be.
//Learn peculiarities and particularities of Node next.

//Want to connect to Bluetooth as soon as possible for IoT.  Events across the physical ether will be B.T under control of Node. 
//Physical near field ether events will be B.T. with Node riding herd. Pairing needed.
 
//Again, a user needs not know of the existence of the implicit server.  
//It's always running and unconditionally serving up requests for whatever is held.
//Simple as fuck.  Or as simple as I can make it.  
//I create a channel to something by placing something interesting into the UWW space at any old point.

//How does it receive requests and get them under the aegis of the server.  Final link.  
//Any process on the device is served locally by the device and service is synchronous.

//I'm on A and I want to ask for something from B.  uww.From(uww, B) requests the current content of event uww within B.  Should this block?

//World lines remain not even well thought out.  I'm sure my subconscious has a thread going on it, though.
